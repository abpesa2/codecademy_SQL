-- How long has the company been in business?
SELECT MIN(subscription_start) as business_start,
	MAX(subscription_end) as present_day
FROM subscriptions;

-- What segments of users exist?
SELECT DISTINCT segment as segments
FROM subscriptions;

-- What is the overall churn trend since the company started?
WITH overall AS
(SELECT
	'2016-12-01' as first_day,
 	'2017-01-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN overall
),
status AS
(SELECT id,
	first_day as month,
	CASE
		WHEN (subscription_end IS NULL) 
		THEN 1
 		ELSE 0
	END as is_active,
	CASE
		WHEN (subscription_end IS NOT NULL)
		THEN 1
		ELSE 0
	END as is_canceled
FROM cross_join
),
status_aggregate AS 
(SELECT SUM(is_active) as sum_active,
	SUM(is_canceled) as sum_canceled
FROM status
)
SELECT 1.0 * sum_canceled/sum_active as overall_churn_rate
FROM status_aggregate;

--What is overall churn rate per month?
WITH months AS
(SELECT
	'2017-01-01' as first_day,
 	'2017-01-31' as last_day
 UNION
 SELECT
 	'2017-02-01' as first_day,
 	'2017-02-28' as last_day
 UNION
 SELECT
 	'2017-03-01' as first_day,
 	'2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months
),
status AS
(SELECT id,
	first_day as month,
	CASE
		WHEN (subscription_start < first_day)
			AND (subscription_end > first_day
    		OR subscription_end IS NULL) 
		THEN 1
 		ELSE 0
	END as is_active,
	CASE
		WHEN (subscription_end BETWEEN first_day AND last_day)
		THEN 1
		ELSE 0
	END as is_canceled
FROM cross_join
),
status_aggregate AS 
(SELECT month,
	SUM(is_active) as sum_active,
	SUM(is_canceled) as sum_canceled
FROM status
GROUP BY month
)
SELECT month,
	1.0 * sum_canceled/sum_active as churn_rate_all_segments
FROM status_aggregate;

--Compare churn rates between user segments
WITH months AS
(SELECT
	'2017-01-01' as first_day,
 	'2017-01-31' as last_day
 UNION
 SELECT
 	'2017-02-01' as first_day,
 	'2017-02-28' as last_day
 UNION
 SELECT
 	'2017-03-01' as first_day,
 	'2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months
),
status AS
(SELECT id,
	first_day as month,
	CASE
		WHEN (subscription_start < first_day)
			AND (subscription_end > first_day
    		OR subscription_end IS NULL) 
 			AND (segment = 87)
		THEN 1
 		ELSE 0
	END as is_active_87,
	CASE
		WHEN (subscription_start < first_day)
			AND (subscription_end > first_day
    		OR subscription_end IS NULL)
			AND (segment = 30)
		THEN 1
 		ELSE 0
	END as is_active_30,
	CASE
		WHEN (subscription_end BETWEEN first_day AND last_day)
			AND (segment = 87)
		THEN 1
		ELSE 0
	END as is_canceled_87,
	CASE
		WHEN (subscription_end BETWEEN first_day AND last_day)
			AND (segment = 30)
		THEN 1
		ELSE 0
	END as is_canceled_30
FROM cross_join
),
status_aggregate AS 
(SELECT month,
	SUM(is_active_87) as sum_active_87,
	SUM(is_active_30) as sum_active_30,
	SUM(is_canceled_87) as sum_canceled_87,
	SUM(is_canceled_30) as sum_canceled_30
FROM status
GROUP BY month
)
SELECT month,
	1.0 * sum_canceled_87/sum_active_87 as churn_rate_87,
	1.0 * sum_canceled_30/sum_active_30 as churn_rate_30
FROM status_aggregate;

-- How would you modify this code to support a large number of segments?
-- Add a segment column to the temporary 'status' table and the temporary 'status_aggregate' table, and group by month AND segment within the 'status_aggregate' table.  Then finally, include a segment column into the final table and group by both segment AND month.
WITH months AS
(SELECT
	'2017-01-01' as first_day,
 	'2017-01-31' as last_day
 UNION
 SELECT
 	'2017-02-01' as first_day,
 	'2017-02-28' as last_day
 UNION
 SELECT
 	'2017-03-01' as first_day,
 	'2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months
),
status AS
(SELECT id,
	first_day as month,
	segment,
	CASE
		WHEN (subscription_start < first_day)
			AND (subscription_end > first_day
    		OR subscription_end IS NULL)
		THEN 1
 		ELSE 0
	END as is_active,
	CASE
		WHEN (subscription_end BETWEEN first_day AND last_day)
		THEN 1
		ELSE 0
	END as is_canceled
FROM cross_join
),
status_aggregate as
(SELECT month,
	segment,
	SUM(is_active) as sum_active,
	SUM(is_canceled) as sum_canceled
FROM status
GROUP BY month, segment
)
SELECT month,
	segment,
	1.0 * sum_canceled/sum_active as churn_rate
FROM status_aggregate
GROUP BY segment, month;